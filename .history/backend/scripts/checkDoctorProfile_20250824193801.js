// scripts/checkDoctorProfile.js
require('dotenv').config();
const mongoose = require('mongoose');
const Doctor = require('../models/Doctor');

(async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ MongoDB connected');

    const doctors = await Doctor.find()
      .populate('user')
      .populate('specialty')
      .populate('location');

    console.log(`üîπ T·ªïng s·ªë Doctor documents: ${doctors.length}`);

    for (const doc of doctors) {
      const issues = [];

      // Ki·ªÉm tra reference th·∫≠t
      if (!doc.user) issues.push('Missing User reference');
      if (!doc.specialty) issues.push('Missing Specialty reference');
      if (!doc.location) issues.push('Missing Location reference');

      // Ki·ªÉm tra virtuals l·∫•y t·ª´ User
      if (!doc.fullName) issues.push('Missing fullName (from User)');
      if (!doc.phone) issues.push('Missing phone (from User)');

      // Ki·ªÉm tra bio th·∫≠t (empty string h·ª£p l·ªá)
      if (doc.bio === undefined || doc.bio === null) issues.push('Missing bio');

      if (issues.length > 0) {
        console.log(`‚ùå Doctor ${doc._id} issues: ${issues.join(', ')}`);
      } else {
        console.log(`‚úÖ Doctor ${doc.user?.fullName || 'Unknown'} (${doc._id}) OK`);
      }
    }

    mongoose.connection.close();
    console.log('üéØ Ki·ªÉm tra Doctor documents ho√†n t·∫•t');
  } catch (err) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra Doctor documents:', err);
    mongoose.connection.close();
  }
})();
