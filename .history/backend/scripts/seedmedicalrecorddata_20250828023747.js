const mongoose = require('mongoose');
const dotenv = require('dotenv');
const MedicalRecord = require('../models/MedicalRecord');
const Appointment = require('../models/Appointment');
const User = require('../models/User');

dotenv.config();

async function seedMultipleMedicalRecords() {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Connected to MongoDB');

    // X√ìA TO√ÄN B·ªò MEDICAL RECORD C≈®
    await MedicalRecord.deleteMany({});
    console.log('üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô MedicalRecords c≈©');

    // L·∫•y 1 b√°c sƒ© v√† 1 b·ªánh nh√¢n c√≥ s·∫µn
    const doctor = await User.findOne({ role: 'doctor' });
    const patient = await User.findOne({ role: 'patient' });

    if (!doctor || !patient) {
      throw new Error('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y doctor ho·∫∑c patient trong DB. H√£y seed tr∆∞·ªõc.');
    }

    // L·∫•y danh s√°ch appointments gi·ªØa doctor v√† patient
    const appointments = await Appointment.find({
      doctor: doctor._id,
      patient: patient._id,
    }).limit(5); // seed t·ªëi ƒëa 5 c√°i

    if (!appointments.length) {
      throw new Error('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y appointment n√†o gi·ªØa doctor v√† patient.');
    }

    for (let i = 0; i < appointments.length; i++) {
      const appt = appointments[i];

      const record = new MedicalRecord({
        appointment: appt._id,
        doctor: doctor._id,
        patient: patient._id,
        date: appt.date || new Date(),
        height: 165 + Math.floor(Math.random() * 10), // random 165-175 cm
        weight: 55 + Math.floor(Math.random() * 15), // random 55-70 kg
        bp: `${110 + Math.floor(Math.random() * 20)}/${70 + Math.floor(Math.random() * 15)}`,
        pulse: 65 + Math.floor(Math.random() * 15),
        bmi: 20 + Math.random() * 5,
        symptoms: ['Ho', 'ƒêau ƒë·∫ßu', 'S·ªët nh·∫π', 'M·ªát m·ªèi'][Math.floor(Math.random() * 4)],
        diagnosis: ['C·∫£m c√∫m', 'Vi√™m h·ªçng', 'ƒêau d·∫° d√†y', 'Huy·∫øt √°p cao'][Math.floor(Math.random() * 4)],
        notes: 'Theo d√µi t√¨nh tr·∫°ng b·ªánh nh√¢n.',
        prescriptions: [
          {
            name: 'Paracetamol 500mg',
            dose: '1 vi√™n x 2 l·∫ßn/ng√†y',
            quantity: 10,
            note: 'U·ªëng sau ƒÉn',
          },
          {
            name: 'Vitamin C',
            dose: '1 vi√™n/ng√†y',
            quantity: 7,
            note: 'S√°ng sau ƒÉn',
          },
        ],
        conclusion: 'H·∫πn t√°i kh√°m sau 1 tu·∫ßn',
        careAdvice: 'Ngh·ªâ ng∆°i, u·ªëng nhi·ªÅu n∆∞·ªõc, tr√°nh th·ª©c khuya',
      });

      await record.save();
      console.log(`‚úÖ MedicalRecord m·ªõi t·∫°o cho appointment ${appt._id}`);
    }

    console.log('üéâ Seed xong nhi·ªÅu MedicalRecords!');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå L·ªói seed MedicalRecords:', err.message);
    process.exit(1);
  }
}

seedMultipleMedicalRecords();
