// scripts/testDoctorAppointments.js
const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api/doctor'; // ƒë·ªïi theo server c·ªßa b·∫°n
const TEST_DOCTOR_EMAIL = 'doctor@example.com'; // email doctor
const TEST_DOCTOR_PASSWORD = '123456';           // password doctor

async function run() {
  try {
    // 1Ô∏è‚É£ ƒêƒÉng nh·∫≠p (gi·∫£ s·ª≠ /auth/login t·ªìn t·∫°i)
    console.log('üîπ ƒêƒÉng nh·∫≠p doctor...');
    const loginRes = await axios.post('http://localhost:5000/api/auth/login', {
      email: TEST_DOCTOR_EMAIL,
      password: TEST_DOCTOR_PASSWORD,
    });
    const token = loginRes.data.data?.token;
    console.log('‚úÖ Token:', token);

    const headers = { Authorization: `Bearer ${token}` };

    // 2Ô∏è‚É£ L·∫•y profile
    const profileRes = await axios.get(`${BASE_URL}/me`, { headers });
    console.log('üîπ Profile:', profileRes.data.data);

    // 3Ô∏è‚É£ L·∫•y danh s√°ch appointment
    const apptRes = await axios.get(`${BASE_URL}/appointments`, { headers });
    const appointments = apptRes.data.data?.appointments || [];
    console.log(`üîπ T·ªïng s·ªë appointment: ${appointments.length}`);

    if (appointments.length === 0) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ appointment n√†o ƒë·ªÉ test chi ti·∫øt.');
      return;
    }

    // 4Ô∏è‚É£ L·∫•y chi ti·∫øt appointment ƒë·∫ßu ti√™n
    const firstApptId = appointments[0]._id;
    const detailRes = await axios.get(`${BASE_URL}/appointments/${firstApptId}`, { headers });
    console.log('üîπ Chi ti·∫øt appointment ƒë·∫ßu ti√™n:', detailRes.data.data);

    // 5Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i appointment (test chuy·ªÉn sang confirmed)
    const updateRes = await axios.patch(
      `${BASE_URL}/appointments/${firstApptId}/status`,
      { status: 'confirmed' },
      { headers }
    );
    console.log('üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i:', updateRes.data.data);

    // 6Ô∏è‚É£ T·∫°o phi·∫øu kh√°m cho appointment
    const receiptRes = await axios.post(
      `${BASE_URL}/appointments/${firstApptId}/medical-receipt`,
      { diagnosis: 'Test diagnosis', prescription: 'Test prescription' },
      { headers }
    );
    console.log('üîπ T·∫°o phi·∫øu kh√°m:', receiptRes.data.data);

    // 7Ô∏è‚É£ (T√πy ch·ªçn) H·ªßy appointment
    // const cancelRes = await axios.delete(`${BASE_URL}/appointments/${firstApptId}`, { headers });
    // console.log('üîπ H·ªßy appointment:', cancelRes.data.data);

  } catch (err) {
    console.error('‚ùå L·ªói test:', err.response?.data || err.message);
  }
}

run();
