const mongoose = require('mongoose');
const dotenv = require('dotenv');
const MedicalRecord = require('../models/MedicalRecord');
const Appointment = require('../models/Appointment');
const User = require('../models/User');

dotenv.config();

async function seedMedicalRecordsFull() {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Connected to MongoDB');

    // X√ìA d·ªØ li·ªáu c≈©
    await MedicalRecord.deleteMany({});
    await Appointment.deleteMany({});
    console.log('üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô MedicalRecords & Appointments c≈©');

    // L·∫•y doctor + patient t·ª´ DB
    const doctor = await User.findOne({ role: 'doctor' });
    const patient = await User.findOne({ role: 'patient' });

    if (!doctor || !patient) {
      throw new Error('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y doctor ho·∫∑c patient. H√£y seed User tr∆∞·ªõc.');
    }

    // T·∫°o danh s√°ch Appointments m·ªõi
    const now = new Date();
    const appointments = [];
    for (let i = 0; i < 5; i++) {
      const appt = new Appointment({
        doctor: doctor._id,
        patient: patient._id,
        date: new Date(now.getTime() + i * 24 * 60 * 60 * 1000), // h√¥m nay + i ng√†y
        status: 'completed',
        reason: 'Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t',
      });
      await appt.save();
      appointments.push(appt);
      console.log(`üìÖ T·∫°o Appointment ${i + 1}: ${appt._id}`);
    }

    // T·∫°o MedicalRecords cho t·ª´ng Appointment
    for (let appt of appointments) {
      const record = new MedicalRecord({
        appointment: appt._id,
        doctor: doctor._id,
        patient: patient._id,
        date: appt.date,
        height: 160 + Math.floor(Math.random() * 15),
        weight: 50 + Math.floor(Math.random() * 20),
        bp: `${110 + Math.floor(Math.random() * 20)}/${70 + Math.floor(Math.random() * 15)}`,
        pulse: 60 + Math.floor(Math.random() * 20),
        bmi: 20 + Math.random() * 5,
        symptoms: ['S·ªët nh·∫π', 'Ho', 'ƒêau ƒë·∫ßu', 'M·ªát m·ªèi'][Math.floor(Math.random() * 4)],
        diagnosis: ['Vi√™m h·ªçng', 'C·∫£m c√∫m', 'D·∫° d√†y', 'Huy·∫øt √°p cao'][Math.floor(Math.random() * 4)],
        notes: 'Theo d√µi th√™m, t√°i kh√°m khi c·∫ßn.',
        prescriptions: [
          {
            name: 'Paracetamol 500mg',
            dose: '1 vi√™n x 2 l·∫ßn/ng√†y',
            quantity: 10,
            note: 'U·ªëng sau ƒÉn',
          },
          {
            name: 'Vitamin C',
            dose: '1 vi√™n/ng√†y',
            quantity: 7,
            note: 'S√°ng sau ƒÉn',
          },
        ],
        conclusion: 'H·∫πn t√°i kh√°m sau 7 ng√†y',
        careAdvice: 'Ngh·ªâ ng∆°i, u·ªëng ƒë·ªß n∆∞·ªõc, h·∫°n ch·∫ø l√†m vi·ªác n·∫∑ng',
      });

      await record.save();
      console.log(`‚úÖ T·∫°o MedicalRecord cho Appointment ${appt._id}`);
    }

    console.log('üéâ Seed MedicalRecords ho√†n t·∫•t!');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå L·ªói khi seed MedicalRecords:', err.message);
    process.exit(1);
  }
}

seedMedicalRecordsFull();
