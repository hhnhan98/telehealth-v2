const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const SALT_ROUNDS = 10;

const userSchema = new mongoose.Schema(
  {
    fullName: {
      type: String,
      required: [true, 'Vui l√≤ng nh·∫≠p h·ªç t√™n'],
      trim: true,
      minlength: [2, 'H·ªç t√™n qu√° ng·∫Øn'],
      maxlength: [100, 'H·ªç t√™n qu√° d√†i'],
    },
    email: {
      type: String,
      unique: true,
      required: [true, 'Vui l√≤ng nh·∫≠p email'],
      lowercase: true,
      trim: true,
      match: [/.+@.+\..+/, 'Email kh√¥ng h·ª£p l·ªá'],
    },
    password: {
      type: String,
      required: [true, 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u'],
      minlength: [6, 'M·∫≠t kh·∫©u ph·∫£i t·ª´ 6 k√Ω t·ª± tr·ªü l√™n'],
    },
    role: {
      type: String,
      enum: ['patient', 'doctor', 'admin'],
      required: true,
      default: 'patient',
    },
    phone: {
      type: String,
      trim: true,
      match: [/^[0-9]{10}$/, 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá'],
      default: '',
    },
    gender: {
      type: String,
      enum: ['male', 'female', 'other'],
      default: 'other',
    },
  },
  { timestamps: true }
);

// === Hash password tr∆∞·ªõc khi l∆∞u ===
userSchema.pre('save', async function (next) {
  try {
    console.log('Pre-save hook triggered for user:', this.email);

    // --- Chu·∫©n h√≥a email
    if (this.isModified('email')) {
      console.log('Email before trim/lowercase:', this.email);
      this.email = String(this.email).trim().toLowerCase();
      console.log('‚úÖ Email after trim/lowercase:', this.email);
    }

    // --- Hash password n·∫øu user m·ªõi ho·∫∑c password b·ªã thay ƒë·ªïi
    if (this.isNew || this.isModified('password')) {
      console.log('üîë Password before trim:', this.password);
      const cleanPassword = String(this.password).trim();
      console.log('üîë Password after trim:', cleanPassword);

      const hash = await bcrypt.hash(cleanPassword, SALT_ROUNDS);
      this.password = hash;
      console.log('‚úÖ Password hashed:', this.password);
    } else {
      console.log('‚ÑπÔ∏è Password not modified, skipping hash');
    }

    next();
  } catch (err) {
    console.error('‚ùå Error in pre-save hook:', err);
    next(err);
  }
});


// === So s√°nh password ===
userSchema.methods.comparePassword = async function (candidatePassword) {
  return bcrypt.compare(String(candidatePassword).trim(), this.password);
};

// === X√≥a password khi tr·∫£ v·ªÅ JSON ===
userSchema.methods.toJSON = function () {
  const obj = this.toObject();
  delete obj.password;
  return obj;
};

module.exports = mongoose.model('User', userSchema);
